[{"name":"app.R","content":"\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\nlibrary(dplyr)\r\n\r\n# Define UI\r\nui <- fluidPage(\r\n  titlePanel(\"Complex Shiny App Example\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      sliderInput(\"obs\", \"Number of observations:\", min = 1, max = 1000, value = 500),\r\n      selectInput(\"dist\", \"Distribution type:\", choices = c(\"Normal\", \"Uniform\")),\r\n      actionButton(\"refresh\", \"Refresh Plot\")\r\n    ),\r\n    mainPanel(\r\n      plotOutput(\"distPlot\"),\r\n      tableOutput(\"summaryTable\")\r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic\r\nserver <- function(input, output) {\r\n  data <- reactive({\r\n    req(input$refresh)\r\n    if (input$dist == \"Normal\") {\r\n      rnorm(input$obs)\r\n    } else {\r\n      runif(input$obs)\r\n    }\r\n  })\r\n  \r\n  output$distPlot <- renderPlot({\r\n    df <- data.frame(value = data())\r\n    ggplot(df, aes(x = value)) +\r\n      geom_histogram(binwidth = 0.1) +\r\n      theme_minimal() +\r\n      labs(title = \"Distribution Plot\")\r\n  })\r\n  \r\n  output$summaryTable <- renderTable({\r\n    df <- data.frame(value = data())\r\n    summary <- df %>% summarise(\r\n      mean = mean(value),\r\n      median = median(value),\r\n      sd = sd(value)\r\n    )\r\n    return(summary)\r\n  })\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n\r\n","type":"text"}]
